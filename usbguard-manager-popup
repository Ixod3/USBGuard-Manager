#!/usr/bin/python3

# Title: USBGuard-Manager-Popup
# Autor: Ixod3
# Creation date: 2023-06-02
# Description: PyQT-App popup when user connect USB device

import os
import sys
import configparser
import qdarkstyle
from PyQt5.QtWidgets import QApplication, QLineEdit, QWidget, QPushButton, QLabel, QGridLayout
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import Qt
from PyQt5.QtCore import *

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        # Récupère les informations de l'écran principal
        width, height = self.read_screen_size()

        # lire dans /etc/usbguard/usbguard-manager.conf
#        screen_height = 900
#        screen_width = 1600

        window_width = 400
        window_height = 150
        
        x = (width - window_width) // 2
        y = (height - window_height) // 3 * 2

        self.setWindowTitle('USBGuard-Popup')
        self.setFixedSize(window_width, window_height)
        self.move(x, y)
        self.show()

        self.zone_popup()

    def zone_popup(self):

        # Verification du theme
        gnome_theme, theme = self.read_theme()

        # Déclaration du QGridLayout
        zone_popup_layout = QGridLayout()
        self.setLayout(zone_popup_layout)

        # Récupération des IDs, S/N
        id = sys.argv[1]
        serial = sys.argv[2]
        user = sys.argv[3]

        # Creation short_serial
        if len(serial) > 10:
            serial_short = serial[0:7] + "..."
        elif len(serial) == 0:
            serial_short = "None"
        else:
            serial_short = serial

        # Déclaration du QGridLayout
        label_id = QLabel(f"ID : {id}")
        label_id.setObjectName("label_id")
        label_id.setStyleSheet(gnome_theme)
        label_id.setAlignment(Qt.AlignCenter)
        label_id.setFixedHeight(20)

        label_serial = QLabel(f"SN : {serial_short}")
        label_serial.setObjectName("label_serial")
        label_serial.setStyleSheet(gnome_theme)
        label_serial.setAlignment(Qt.AlignCenter)
        label_serial.setFixedHeight(20)

        lineedit_desc = QLineEdit("")
        lineedit_desc.setObjectName("lineedit_desc")
        lineedit_desc.setPlaceholderText("Default")
        lineedit_desc.setStyleSheet(gnome_theme)

        button_allow = QPushButton("Allow")
        button_allow.setObjectName("button_allow")
        button_allow.setFixedSize(120, 25)
        button_allow.setStyleSheet(gnome_theme)

        button_tmp = QPushButton("Temporary")
        button_tmp.setObjectName("button_tmp")
        button_tmp.setFixedSize(120, 25)
        button_tmp.setStyleSheet(gnome_theme)

        button_block = QPushButton("Block")
        button_block.setObjectName("button_block")
        button_block.setFixedSize(120, 25)
        button_block.setStyleSheet(gnome_theme)

        # Connection des buttons
        button_allow.clicked.connect(lambda: self.action_allow(id, serial, lineedit_desc, user))
        button_tmp.clicked.connect(lambda: self.action_tmp(id, user))
        button_block.clicked.connect(lambda: self.action_block())

        # Positionnement des éléments dans le QGridLayout
        zone_popup_layout.addWidget(label_id, 0, 0, 1, 3)
        zone_popup_layout.addWidget(label_serial, 0, 3, 1, 3)
        zone_popup_layout.addWidget(lineedit_desc, 1, 1, 1, 4)
        zone_popup_layout.addWidget(button_allow, 2, 0, 1, 2)
        zone_popup_layout.addWidget(button_tmp, 2, 2, 1, 2)
        zone_popup_layout.addWidget(button_block, 2, 4, 1, 2)

    def action_allow(self, id, serial, lineedit_desc, user):
        # Récupération de la description
        if len(lineedit_desc.text()) > 0:
            description = lineedit_desc.text()
        else:
            description = "Default"

        # Récupération du device
        device = os.popen(f"usbguard list-devices | grep \"id {id}\" | grep \"serial \\\"{serial}\\\"\"").read()
        device = device.split(" ",2)[2]
        device = device.replace("\n","")


        # Modifier les fichiers
        os.system(f"sudo -u {user} echo 'allow {device}' >> /etc/usbguard/rules.conf")
        os.system(f"sudo -u {user} echo '{id}#&#{serial}#&#{description}' >> /etc/usbguard/desc.conf")

        # Suppresion du retour a la ligne
        os.system(f"sed -i -e '$s/\r$//' /etc/usbguard/rules.conf")

        # Redemarage du service USBGuard
        os.system(f"systemctl restart usbguard.service")

        # Fermeture de la pop-up
        app.quit()

    def action_tmp(self, id, user):

        # Autorisation temporaire USBGuard
        os.system(f"sudo -u {user} usbguard allow-device {id}")

        # Fermeture de la pop-up
        app.quit()

    def action_block(self):
        
        # Fermeture de la pop-up
        app.quit()

    def read_theme(self):

        # Lecture et récupération du theme dans le fichier de conf
        config = configparser.ConfigParser()
        config.read("/etc/usbguard/usbguard-manager.ini")
        theme = config.get("Settings", "theme")

        if theme != "dark" and theme != "light":
            theme="dark"

        gnome_theme = open(f"/etc/usbguard/themes/{theme}/gnome-{theme}-popup.css").read()

        return gnome_theme, theme

    def read_screen_size(self):

        # Lecture et récupération du theme dans le fichier de conf
        config = configparser.ConfigParser()
        config.read("/etc/usbguard/usbguard-manager.ini")
        width = int(config.get("Settings", "width"))
        height = int(config.get("Settings", "height"))

        return width, height

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet(qdarkstyle.load_stylesheet())

    window = MainWindow()

    # Récuperation du theme
    config = configparser.ConfigParser()
    config.read("/etc/usbguard/usbguard-manager.ini")
    theme = config.get("Settings", "theme")

    if theme == 'light':
        color = 'F6F5F4'
    else:
        color = '353535'

    window.setWindowIcon(QIcon("icones/usbguard.png"))
    window.setStyleSheet(f"background-color: #{color};")
    sys.exit(app.exec_())