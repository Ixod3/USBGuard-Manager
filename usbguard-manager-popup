#!/usr/bin/python3

# Title: USBGuard-Manager-Popup
# Autor: Ixod3
# Creation date: 2023-06-02
# Description: PyQT-App popup when user connect USB device

import os
import sys
import subprocess
import qdarkstyle
from PyQt5.QtWidgets import QFrame, QDesktopWidget, QApplication, QMainWindow, QLineEdit, QWidget, QVBoxLayout, QHBoxLayout, QPushButton, QScrollArea, QLabel, QGridLayout
from PyQt5.QtGui import QIcon, QPixmap
from PyQt5.QtCore import QProcess
from PyQt5.QtCore import Qt
from PyQt5.QtCore import *

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()

        screen_height = 900 # replace by height screen value {place_height_screen_value_here}
        screen_width = 1600 # replace by width screen value {place_width_screen_value_here}

        window_width = 400
        window_height = 150
        
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 3 * 2

        self.setWindowTitle('USBGuard-Popup')
        self.setFixedSize(window_width, window_height)
        self.move(x, y)
        self.show()

        self.zone_popup()

    def zone_popup(self):

        # Déclaration du QGridLayout
        zone_popup_layout = QGridLayout()
        self.setLayout(zone_popup_layout)

        # Récupération des IDs, S/N
        id = sys.argv[1]
        serial = sys.argv[2]
        user = sys.argv[3]

        # Creation short_serial
        if len(serial) > 10:
            serial_short = serial[0:7] + "..."
        elif len(serial) == 0:
            serial_short = "None"
        else:
            serial_short = serial

        # Déclaration du QGridLayout
        label_id = QLabel(f"ID : {id}")
        label_id.setAlignment(Qt.AlignCenter)
        label_id.setFixedHeight(20)

        label_serial = QLabel(f"SN : {serial_short}")
        label_serial.setAlignment(Qt.AlignCenter)
        label_serial.setFixedHeight(20)

        lineedit_desc = QLineEdit("")
        lineedit_desc.setPlaceholderText("Default")
        lineedit_desc.setStyleSheet("QLineEdit {background-color: #373737; border: 1px solid gray; color: #EEEEEC; border-radius: 2px;}")

        button_allow = QPushButton("Allow")
        button_allow.setFixedSize(120, 25)
        button_allow.setStyleSheet("QPushButton:hover {background-color: #282828; border: 1px solid #1B1B1B; border-radius: 2px;}\
                                   QPushButton {background-color: #373737; color: #EEEEEC;border: 1px solid #1B1B1B;}")

        button_tmp = QPushButton("Temporary")
        button_tmp.setFixedSize(120, 25)
        button_tmp.setStyleSheet("QPushButton:hover {background-color: #282828; border: 1px solid #1B1B1B; border-radius: 2px;}\
                                   QPushButton {background-color: #373737; color: #EEEEEC;border: 1px solid #1B1B1B;}")

        button_block = QPushButton("Block")
        button_block.setFixedSize(120, 25)
        button_block.setStyleSheet("QPushButton:hover {background-color: #282828; border: 1px solid #1B1B1B; border-radius: 2px;}\
                                   QPushButton {background-color: #373737; color: #EEEEEC;border: 1px solid #1B1B1B;}")

        # Connection des buttons
        button_allow.clicked.connect(lambda: self.action_allow(id, serial, lineedit_desc, user))
        button_tmp.clicked.connect(lambda: self.action_tmp(id, user))
        button_block.clicked.connect(lambda: self.action_block())

        # Positionnement des éléments dans le QGridLayout
        zone_popup_layout.addWidget(label_id, 0, 0, 1, 3)
        zone_popup_layout.addWidget(label_serial, 0, 3, 1, 3)
        zone_popup_layout.addWidget(lineedit_desc, 1, 1, 1, 4)
        zone_popup_layout.addWidget(button_allow, 2, 0, 1, 2)
        zone_popup_layout.addWidget(button_tmp, 2, 2, 1, 2)
        zone_popup_layout.addWidget(button_block, 2, 4, 1, 2)

    def action_allow(self, id, serial, lineedit_desc, user):
        # Récupération de la description
        if len(lineedit_desc.text()) > 0:
            description = lineedit_desc.text()
        else:
            description = "Default"

        # Récupération du device
        device = os.popen(f"usbguard list-devices | grep \"id {id}\" | grep \"serial \\\"{serial}\\\"\"").read()
        device = device.split(" ",2)[2]
        device = device.replace("\n","")


        # Modifier les fichiers
        os.system(f"sudo -u {user} echo 'allow {device}' >> /etc/usbguard/rules.conf")
        os.system(f"sudo -u {user} echo '{id}#&#{serial}#&#{description}' >> /etc/usbguard/desc.conf")

        # Suppresion du retour a la ligne
        os.system(f"sed -i -e '$s/\r$//' /etc/usbguard/rules.conf")

        # Redemarage du service USBGuard
        os.system(f"systemctl restart usbguard.service")

        # Fermeture de la pop-up
        app.quit()

    def action_tmp(self, id, user):

        # Autorisation temporaire USBGuard
        os.system(f"sudo -u {user} usbguard allow-device {id}")

        # Fermeture de la pop-up
        app.quit()

    def action_block(self):
        
        # Fermeture de la pop-up
        app.quit()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setStyleSheet(qdarkstyle.load_stylesheet())

    window = MainWindow()
    window.setWindowIcon(QIcon("icones/usbguard.png"))
    window.setStyleSheet(f"background-color: #353535;")
    sys.exit(app.exec_())